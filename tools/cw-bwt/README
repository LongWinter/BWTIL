Welcome to the context-wise BWT construction algorithm (cw-bwt)!

Authors: Nicola Prezza, Nicola Gigante, and Alberto Policriti
mail: nicolapr@gmail.com


*** Brief introduction: ***


cw-bwt builds the BWT of a text (ASCII) file, using an amount of RAM comparable with the size of the compressed text. The algorithm exploits the partitioning induced by the length-k contexts to reduce the size of internal dynamic data structures used. As a result, for certain text distributions (nearly uniform) and small alphabets (e.g. DNA) cw-bwt is optimal in both time and space.


*** Complexity ***


n = input length
Hk = k-th order entropy of the text, where k = log_s( n/log^2 n ) - 1 (Hk <= log s, where s is the alphabet size)

SPACE:	n * Hk + o(n * Hk) bits	(compressed succinct space)

TIME:

---------------------------------------------------------------------------------------------
		complexity	notes	

expected	O( n * Hk )	uniform text distribution assumed. A factor Hk from optimal. optimal for small alphabets (e.g. DNA)

worst-case	O( n * log n * Hk )	a factor log n * Hk from optimal

---------------------------------------------------------------------------------------------

Notes: 
The worst-case is a text with large (O(n)) length-k contexts; notice, however, that in this case the text is also highly compressible (Hk is small)


*** Compile ***

In the cw-bwt/ directory, just execute

> make clean; make

The executable "cw-bwt" will be created in the BWTIL/ main folder.

*** Execute ***

In the BWTIL/ directory, execute

> ./cw-bwt

to display info about the tool usage.
