Welcome to the dB-hash data structure!

Authors: Nicola Prezza and Alberto Policriti
mail: nicolapr@gmail.com

*** Brief introduction: ***

The dB-hash is a succinct data structure that simulates a hash table efficiently and in little space (O(n) bits instead of O(n log n) bits required by a standard hash) exploiting hash functions that are homomorphisms on de Bruijn graphs (de Bruijn hash functions). This space efficiency is paid with a slight slowdown of the lookup operation, which costs O(log m) (m being pattern length) instead of O(1) of a standard hash.

The dB-hash is particularly useful in approximate string matching under the Hamming distance, being the first succinct index offering expected O((log n)^k + m) time for a search with maximum Hamming distance k.

*** Compile ***

In the dB-hash/ directory, just execute

> make clean; make

The executable "dB-hash" will be created in the BWTIL/ main folder.

*** Test ***

In the dB-hash/ directory, execute

> make example-build

to build a dB-hash with pattern length=30 on the file test/50000.fasta . This will create the file test/50000.fasta.dbh . After that, execute

> make example-search

to search the pattern "aaatttataacctattgcaccatatactag" (exact search) in the dB-hash just created.

*** Notes ***

please note that, due to the particular suffix array library employed, the builtin construction of the BWT can currently handle only texts shorter than 2^31 characters. To build the structure on longer texts, an external tool can be used to compute the BWT (which can then be given as input to one of the constructors of the dB-hash data structure). We are working to integrate more powerful BWT-construction libraries in our software.



